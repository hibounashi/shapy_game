# -*- coding: utf-8 -*-
"""expert system.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xeFWTa_jMbWdyBX-DU2ljYL_nY_mFe1S
"""

from aima3.logic import *
from aima3.utils import *

KB = FolKB()

#Base de connaissance (features)

KB.tell(expr('NbCotes(carre, 4)'))
KB.tell(expr('NbCotes(triangle, 3)'))
KB.tell(expr('NbCotes(cercle, 0)'))
KB.tell(expr('NbCotes(rectangle, 4)'))
KB.tell(expr('NbCotes(pentagone, 5)'))
KB.tell(expr('NbCotes(hexagone, 6)'))


KB.tell(expr('NbAngles(carre, 4)'))
KB.tell(expr('NbAngles(triangle, 3)'))
KB.tell(expr('NbAngles(cercle, 0)'))
KB.tell(expr('NbAngles(rectangle, 4)'))
KB.tell(expr('NbAngles(pentagone, 5)'))
KB.tell(expr('NbAngles(hexagone, 6)'))



KB.tell(expr('Symetrie(carre)'))
KB.tell(expr('Symetrie(cercle)'))
KB.tell(expr('Symetrie(rectangle)'))
KB.tell(expr('Symetrie(hexagone)'))



KB.tell(expr('ParalleleCotes(rectangle)'))
KB.tell(expr('ParalleleCotes(carre)'))
KB.tell(expr('ParalleleCotes(hexagone)'))



KB.tell(expr('PerpondicularCotes(carre)'))
KB.tell(expr('PerpondicularCotes(rectangle)'))
KB.tell(expr('PerpondicularCotes(triangle)'))



KB.tell(expr('NbDiagonales(hexagon,9) )'))
KB.tell(expr('NbDiagonales(rectangle,2)'))
KB.tell(expr('NbDiagonales(pentagone,5)'))
KB.tell(expr('NbDiagonales(carre,2)'))



KB.tell(expr('Cote courbe(cercle)'))
KB.tell(expr('EqualSides(carre)'))


KB.tell(expr('Convex(carre)'))
KB.tell(expr('Convex(triangle)'))
KB.tell(expr('Convex(cercle)'))
KB.tell(expr('Convex(rectangle)'))
KB.tell(expr('Convex(pentagone)'))
KB.tell(expr('Convex(hexagone)'))


KB.tell(expr('AcuteAngle(triangle)'))
KB.tell(expr('DroitAngle(triangle)'))
KB.tell(expr('ObtuseAngle(triangle)'))
KB.tell(expr('DroitAngle(carre) '))
KB.tell(expr('DroitAngle(rectangle)'))
KB.tell(expr('ObtuseAngle(pentagone)'))
KB.tell(expr('ObtuseAngle(hexagone)'))



#Rulessssss

KB.tell(expr('IsTriangle(x) & AcuteAngle(x)==>IsTriangleAigu(x)'))
KB.tell(expr('IsTriangle(x) & DroitAngleAigus(x)==>IsTriangleRect(x)'))
KB.tell(expr('IsTriangle(x) & ObtuseAngle(x)==>IsTriangleObtus(x)'))


KB.tell(expr('NbCotes(x,5) | NbAngles(x,5) ==>IsPentagone(x)'))
KB.tell(expr('NbCotes(x,6) | NbAngles(x,6) ==>IsHexagone(x)'))
KB.tell(expr('NbCotes(x,0) | NbAngles(x,0)==>IsCercle(x)'))


KB.tell(expr('NbCotes(x,4) & ParalleleCotes(x) & EqualSides(x)==>IsCarre(x)'))
KB.tell(expr('NbCotes(x,4) & ParalleleCotes(x) & (~EqualSides(x))==>IsRectangle(x)'))


KB.tell(expr('ParalleleCotes(x) & (NbAngles(x,6)|NbCotes(x,6))==>IsHexagone(x)'))


KB.tell(expr('Cote courbe(x)==>IsCercle(x)'))

def display_shape_features(shape):
    print("Features of", shape, ":")
    inferred_features = fol_fc_ask(KB, expr('Is' + shape + '(x)'), bindings={ 'x': shape })
    for feature in inferred_features:
        print(feature)

# Example usage
display_shape_features('Carre')