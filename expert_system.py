# -*- coding: utf-8 -*-
"""expert system.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xeFWTa_jMbWdyBX-DU2ljYL_nY_mFe1S
"""

from aima.logic import *
from aima.utils import *

data = {
    'shape' : 'carre',
    'features' : '4_sides, noAngles'
}

def convertToKBFeatures(data):
    result = []
    if "no_sides" in data["features"]:
        result.append('NbCotes(Cercle, Zero)')
    elif "3_sides" in data["features"]:
        result.append('NbCotes(Triangle, Three)')
    elif "4_sides" in data["features"]:
        result.append('NbCotes(Quadrant, Four)')
    elif "5_sides" in data["features"]:
        result.append('NbCotes(Pentagone, Five)')
    elif "6_sides" in data["features"]:
        result.append('NbCotes(Hexagone, Six)')
    return result

def convertToKBShape(data):
    
    if data["shape"] == "Cercle" or data["shape"] == "cercle":
        return "Cercle"
    elif data["shape"] == "Triangle" or data["shape"] == "triangle":
        return "Triangle"
    elif data["shape"] == "Quadrant" or data["shape"] == "quadrant":
        return "Quadrant"
    elif data["shape"] == "Carre" or data["shape"] == "carre":
        return "Carre"
    elif data["shape"] == "Pentagone" or data["shape"] == "pentagone":
        return "Pentagone"
    elif data["shape"] == "Hexagone" or data["shape"] == "hexagone":
        return "Hexagone"
    else:
        return "nothing"


def forwardChainQuery(params , shape):
    KB = FolKB()
    #Base de connaissance (features)

    '''
    #number of sides
    KB.tell(expr('NbCotes(Cercle, Zero)'))

    KB.tell(expr('NbCotes(Triangle, Three)'))

    KB.tell(expr('NbCotes(Quadrant, Four)'))

    KB.tell(expr('NbCotes(Pentagone, Five)'))

    KB.tell(expr('NbCotes(Hexagone, Six)'))

    '''
    '''
    KB.tell(expr('NbAngles(Carre, Four)'))
    KB.tell(expr('NbAngles(Triangle, Three)'))
    KB.tell(expr('NbAngles(Cercle, Zero)'))
    KB.tell(expr('NbAngles(Rectangle, Four)'))
    KB.tell(expr('NbAngles(Pentagone, Five)'))
    KB.tell(expr('NbAngles(Hexagone, Six)'))
    '''


    KB.tell(expr('Symetrie(Carre)'))
    KB.tell(expr('Symetrie(Cercle)'))
    KB.tell(expr('Symetrie(Rectangle)'))
    KB.tell(expr('Symetrie(Hexagone)'))



    KB.tell(expr('ParalleleCotes(Rectangle)'))
    KB.tell(expr('ParalleleCotes(Carre)'))
    KB.tell(expr('ParalleleCotes(Hexagone)'))



    KB.tell(expr('PerpondicularCotes(Carre)'))
    KB.tell(expr('PerpondicularCotes(Rectangle)'))
    KB.tell(expr('PerpondicularCotes(Triangle)'))





    KB.tell(expr('NbDiagonales(TwoDiag,Two)'))

    KB.tell(expr('NbDiagonales(Pentagone,Five)'))

    KB.tell(expr('NbDiagonales(hexagone,Nine)'))



    KB.tell(expr('Cotecourbe(Cercle)'))


    KB.tell(expr('EqualSides(Carre)'))


    KB.tell(expr('Convex(Carre)'))
    KB.tell(expr('Convex(Triangle)'))
    KB.tell(expr('Convex(Cercle)'))
    KB.tell(expr('Convex(Rectangle)'))
    KB.tell(expr('Convex(Pentagone)'))
    KB.tell(expr('Convex(Hexagone)'))

    '''
    KB.tell(expr('AcuteAngle(Triangle)'))
    KB.tell(expr('DroitAngle(Triangle)'))
    KB.tell(expr('ObtuseAngle(Triangle)'))
    KB.tell(expr('DroitAngle(Carre)'))
    KB.tell(expr('DroitAngle(Rectangle)'))
    KB.tell(expr('ObtuseAngle(Pentagone)'))
    KB.tell(expr('ObtuseAngle(Hexagone)'))
    '''
    for param in params:
        KB.tell(expr(param))

    #Rulessssss
    '''
    KB.tell(expr('IsTriangle(x) & AcuteAngle(x)==>IsTriangleAigu(x)'))
    KB.tell(expr('IsTriangle(x) & DroitAngleAigus(x)==>IsTriangleRect(x)'))
    KB.tell(expr('IsTriangle(x) & ObtuseAngle(x)==>IsTriangleObtus(x)'))
    '''


    KB.tell(expr('NbCotes(x,Five) ==> IsPentagone(x)'))
    KB.tell(expr('NbAngles(x,Five) ==> IsPentagone(x)'))

    KB.tell(expr('NbCotes(x,Six) ==> IsHexagone(x)'))
    KB.tell(expr('NbAngles(x,Six) ==> IsHexagone(x)'))

    KB.tell(expr('NbCotes(x,Zero) ==> IsCercle(x)'))
    KB.tell(expr('NbAngles(x,Zero) ==> IsCercle(x)'))


    KB.tell(expr('NbCotes(Quadrant, Four) & ParalleleCotes(x) & EqualSides(x) ==> IsCarre(x)'))

    KB.tell(expr('NbCotes(Quadrant, Four) & ParalleleCotes(x) ==>IsRectangle(x)'))

    KB.tell(expr('ParalleleCotes(x) & NbAngles(x,Six) ==>IsHexagone(x)'))

    KB.tell(expr('NbCotes(x,Six)==>IsHexagone(x)'))

    KB.tell(expr('Cotecourbe(x)==>IsCercle(x)'))

    

    # Query the KB for properties of 'Carre'
    features = fol_fc_ask(KB, expr('Is'+ shape +'(x)'))

    # Convert the generator to a list and print the results
    print("Features of Carre:")
    print(list(features))

forwardChainQuery(convertToKBFeatures(data), convertToKBShape(data))
#print(convertToKBFeatures(data))
#print(convertToKBShape(data))



